name: ttt

services:
  ttt:
    build:
      context: ../../
      dockerfile: deploy/prod/ttt/Dockerfile
      tags:
        - "ttt:prod"
    container_name: ttt
    restart: always
    depends_on:
      postgres_master:
        condition: service_healthy
      postgres_replica1:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      nats_streams:
        condition: service_completed_successfully
    environment:
      TTT_POSTGRES_URL: postgresql+psycopg://ttt:${POSTGRES_TTT_PASSWORD}@postgres_master:5432/ttt
      TTT_POSTGRES_POOL_SIZE: 8
      TTT_POSTGRES_POOL_TIMEOUT_SECONDS: 45
      TTT_POSTGRES_POOL_RECYCLE_SECONDS: 1800
      TTT_POSTGRES_POOL_PRE_PING: false
      TTT_POSTGRES_ECHO: true

      TTT_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      TTT_REDIS_POOL_SIZE: 16

      TTT_NATS_URL: nats://${NATS_TOKEN}@nats:4222

      TTT_GAME_WAITING_QUEUE_PULLING_TIMEOUT_MIN_MS: 100
      TTT_GAME_WAITING_QUEUE_PULLING_TIMEOUT_SALT_MS: 200
    secrets:
      - secrets
    networks:
      - postgres
      - redis
      - nats
    command: ttt
    mem_limit: 200mb

  redis:
    image: redis:8.0.2-bookworm
    container_name: ttt-redis
    restart: always
    volumes:
      - redis-data:/data
      - ./redis:/mnt/dev
    networks:
      - redis
    healthcheck:
      test: echo PING | redis-cli -a ${REDIS_PASSWORD} | grep -qF PONG
      start_period: 2m
      start_interval: 1s
      interval: 3s
    command: [
      "redis-server", "/mnt/dev/redis.conf", "--requirepass", "$REDIS_PASSWORD"
    ]
    mem_limit: 20mb

  postgres_master:
    build:
      context: ../../
      dockerfile: deploy/prod/postgres_master/Dockerfile
      tags:
        - "ttt_postgres_master:prod"
    container_name: ttt-postgres-master
    restart: always
    volumes:
      - postgres-master-data:/var/lib/postgresql/data
    networks:
      - postgres
    environment:
      POSTGRES_DB: ttt
      POSTGRES_USER: ttt
      POSTGRES_PASSWORD: ${POSTGRES_TTT_PASSWORD}
      POSTGRES_REPLICA_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
    command: ["-c", "config_file=/mnt/postgres.conf"]
    mem_limit: 30mb
    healthcheck:
      test: pg_isready -d ttt -U ttt
      start_period: 1m
      start_interval: 1s
      interval: 5s

  postgres_replica1:
    build:
      context: ../../
      dockerfile: deploy/prod/postgres_replica/Dockerfile
      tags:
        - "ttt_postgres_replica1:prod"
      args:
        POSTGRES_REPLICA_NAME: replica1
        POSTGRES_REPLICA_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
    container_name: ttt-postgres-replica1
    restart: always
    depends_on:
      postgres_master:
        condition: service_healthy
    volumes:
      - postgres-replica1-data:/var/lib/postgresql/data
    networks:
      - postgres
    environment:
      POSTGRES_DB: ttt
      POSTGRES_USER: ttt
      POSTGRES_PASSWORD: ${POSTGRES_TTT_PASSWORD}
    command: ["bash", "/mnt/start-server.sh"]
    mem_limit: 30mb
    healthcheck:
      test: pg_isready -d ttt -U ttt
      start_period: 1m
      start_interval: 1s
      interval: 5s

  nats:
    image: nats:2.11.5-alpine3.22
    container_name: ttt-nats
    volumes:
      - ./nats:/mnt
      - nats-data:/data
    networks:
      - nats
    environment:
      NATS_TOKEN: ${NATS_TOKEN}
    command: nats-server -c /mnt/nats.conf
    mem_limit: 30mb
    restart: always
    healthcheck:
      test: wget http://localhost:8222/healthz -q -O /dev/null
      start_period: 2m
      start_interval: 0.5s
      interval: 3s

  nats_streams:
    image: bitnami/natscli:0.2.3-debian-12-r4
    container_name: ttt-nats-streams
    depends_on:
      nats:
        condition: service_healthy
    volumes:
      - ./nats:/mnt
    networks:
      - nats
    environment:
      NATS_TOKEN: ${NATS_TOKEN}
    entrypoint: [""]
    command: ["bash", "/mnt/add_streams.sh"]

volumes:
  postgres-replica1-data:
    name: "ttt-prod-postgres-replica1-data"
  postgres-master-data:
    name: "ttt-prod-postgres-master-data"
  redis-data:
    name: "ttt-prod-redis-data"
  nats-data:
    name: "ttt-prod-nats-data"

networks:
  postgres: null
  redis: null
  nats: null

secrets:
  secrets:
    file: ttt/secrets.yaml
