from aiogram.client.bot import Bot
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.formatting import Bold, Text, Underline, as_list

from ttt.entities.core.game.game import (
    Game,
    GameCancellationResult,
    GameCompletionResult,
    GameState,
)
from ttt.entities.core.game.win import AiWin
from ttt.entities.core.user.win import UserWin
from ttt.presentation.aiogram.game.keyboards import game_keyboard
from ttt.presentation.aiogram.game.texts import game_cell


async def started_game_message(
    bot: Bot,
    chat_id: int,
    game: Game,
    user_id: int,
) -> None:
    if user_id == game.player1.id:
        about_users = Text(
            Underline("–í—ã"),
            f" ‚Äî {game.player1_emoji.str_}",
            f", –í—Ä–∞–≥ ‚Äî {game.player2_emoji.str_}",
        )
        about_move = "–•–æ–¥–∏—Ç–µ"
    else:
        about_users = Text(
            f"–í—Ä–∞–≥ ‚Äî {game.player1_emoji.str_}, ",
            Underline("–í—ã"),
            f" ‚Äî {game.player2_emoji.str_}",
        )
        about_move = "–ñ–¥–∏—Ç–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞"

    content = as_list(
        "‚öîÔ∏è –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å",
        about_users,
        about_move,
    )
    await bot.send_message(
        chat_id, **content.as_kwargs(), reply_markup=game_keyboard(game),
    )


async def maked_move_message(
    bot: Bot,
    chat_id: int,
    game: Game,
    user_id: int,
) -> None:
    match user_id, game.state:
        case (
            (game.player1.id, GameState.wait_player1)
            | (game.player2.id, GameState.wait_player2)
        ):
            message = "üéØ –•–æ–¥–∏—Ç–µ"
        case (
            (game.player2.id, GameState.wait_player1)
            | (game.player1.id, GameState.wait_player2)
        ):
            message = "üéØ –ñ–¥–∏—Ç–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞"
        case _:
            raise ValueError(game.state, user_id)

    keyboard = game_keyboard(game)
    await bot.send_message(chat_id, message, reply_markup=keyboard)


async def completed_game_messages(
    bot: Bot,
    chat_id: int,
    game: Game,
    user_id: int,
) -> None:
    match game.result:
        case GameCompletionResult(
            win=UserWin(winner_id) as win,
        ) if winner_id == user_id:
            result_emoji = "üéÜ"
            about_result = f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏! +{win.new_stars} üåü"
        case GameCompletionResult(win=None):
            result_emoji = "üïä"
            about_result = "–ù–∏—á—å—è!"
        case GameCompletionResult(win=UserWin(_) | AiWin()):
            result_emoji = "üíÄ"
            about_result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        case GameCancellationResult():
            result_emoji = "üëª"
            about_result = "–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!"
        case _:
            raise ValueError

    board_content = as_list(
        *(
            as_list(*(game_cell(cell, game, "‚ñë‚ñë") for cell in line), sep="‚ñë‚ñë")
            for line in game.board
        ),
        sep="\n‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n",
    )

    content = as_list(about_result, board_content, sep="\n\n")

    await bot.send_message(chat_id, result_emoji)
    await bot.send_message(
        chat_id,
        **content.as_kwargs(),
        reply_markup=ReplyKeyboardRemove(),
    )


async def user_already_in_game_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "‚öîÔ∏è –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ")


async def waiting_for_game_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "üë• –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –Ω–∞—á–∞—Ç")


async def double_waiting_for_game_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "üë• –ü–æ–∏—Å–∫ –∏–≥—Ä—ã —É–∂–µ –Ω–∞—á–∞—Ç")


async def no_game_message(bot: Bot, chat_id: int) -> None:
    text = Text("‚ùå –ò–≥—Ä—ã –Ω–µ—Ç. –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ: ", Bold("/game"))
    await bot.send_message(chat_id, **text.as_kwargs())


async def already_completed_game_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")


async def not_current_user_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥")


async def no_cell_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "‚ùå –¢–∞–∫–æ–π —è—á–µ–π–∫–∏ –Ω–µ—Ç")


async def already_filled_cell_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "‚ùå –Ø—á–µ–π–∫–∞ —É–∂–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
