from collections.abc import Sequence

from aiogram import Bot
from aiogram.utils.formatting import (
    Bold,
    Italic,
    Text,
    Underline,
    as_list,
)

from ttt.entities.core.stars import Stars
from ttt.presentation.aiogram.common.texts import short_float_text
from ttt.presentation.aiogram.user.keyboards import (
    emoji_menu_keyboard,
    main_menu_keyboard,
    stars_prices_keyboard,
)
from ttt.presentation.aiogram.user.texts import emoji_list_text


async def profile_message(  # noqa: PLR0913, PLR0917
    bot: Bot,
    chat_id: int,
    stars: int,
    rating: float,
    number_of_wins: int,
    number_of_draws: int,
    number_of_defeats: int,
    is_in_game: bool,  # noqa: FBT001
) -> None:
    total = number_of_wins + number_of_defeats + number_of_draws

    if total > 0:
        winning_percentage = number_of_wins / total * 100
        winning_percentage_text = (
            f"{int(winning_percentage)}"
            if int(winning_percentage) == winning_percentage
            else f"{winning_percentage:.2f}"
        )
    else:
        winning_percentage_text = None

    content = as_list(
        f"üåü –ó–≤—ë–∑–¥: {stars}",
        f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {short_float_text(rating)}",
        f"üèÜ –ü–æ–±–µ–¥: {number_of_wins}",
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {number_of_defeats}",
        f"üïäÔ∏è –ù–∏—á—å–∏—Ö: {number_of_draws}",
        *(
            []
            if winning_percentage_text is None
            else [f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {winning_percentage_text}%"]
        ),
        "‚öîÔ∏è –°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ" if is_in_game else "üí§ –°–µ–π—á–∞—Å –Ω–µ –≤ –∏–≥—Ä–µ",
    )
    await bot.send_message(chat_id, **content.as_kwargs())


async def emoji_menu_message(
    bot: Bot,
    chat_id: int,
    emojis: Sequence[str],
    selected_emoji: str | None,
) -> None:
    emoji_list_text_ = emoji_list_text(emojis, selected_emoji)

    if emoji_list_text_ is not None:
        keyboard = emoji_menu_keyboard()
        await bot.send_message(
            chat_id, **emoji_list_text_.as_kwargs(), reply_markup=keyboard,
        )
    else:
        emoji_text = Text("üé≠ –£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∂–∏")
        await bot.send_message(chat_id, **emoji_text.as_kwargs())


async def emoji_list_message(
    bot: Bot,
    chat_id: int,
    emojis: Sequence[str],
    selected_emoji: str | None,
) -> None:
    emoji_list_text_ = emoji_list_text(emojis, selected_emoji)

    if emoji_list_text_ is not None:
        await bot.send_message(chat_id, **emoji_list_text_.as_kwargs())
    else:
        emoji_text = Text("üé≠ –£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∂–∏")
        await bot.send_message(chat_id, **emoji_text.as_kwargs())


async def wait_emoji_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "üé≠ –í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∂–∏")


async def not_enough_stars_to_buy_emoji_message(
    bot: Bot,
    chat_id: int,
    stars_to_become_enough: Stars,
) -> None:
    await bot.send_message(
        chat_id,
        f"üòû –ù—É–∂–Ω–æ –µ—â—ë {stars_to_become_enough} üåü –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
    )


async def emoji_already_purchased_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "üé≠ –£–∂–µ –∫—É–ø–ª–µ–Ω–æ")


async def invalid_emoji_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(
        chat_id,
        "‚ùå –≠–º–æ–¥–∂–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë",
    )


async def emoji_was_purchased_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "üåü –ö—É–ø–ª–µ–Ω–æ!")


async def emoji_not_purchased_to_select_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "‚ùå –≠–º–æ–¥–∂–∏ –µ—â—ë –Ω–µ –∫—É–ø–ª–µ–Ω!")


async def selected_emoji_removed_message(bot: Bot, chat_id: int) -> None:
    await bot.send_message(chat_id, "üé≠ –≠–º–æ–¥–∂–∏ —É–±—Ä–∞–Ω")


async def wait_stars_to_start_stars_purchase_message(
    bot: Bot,
    chat_id: int,
) -> None:
    await bot.send_message(
        chat_id,
        "üåü –°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?",
        reply_markup=stars_prices_keyboard(),
    )


async def stars_will_be_added_message(
    bot: Bot,
    chat_id: int,
) -> None:
    await bot.send_message(chat_id, "üåü –ó–≤—ë–∑–¥—ã —Å–∫–æ—Ä–æ –Ω–∞—á–∏—Å–ª—è—Ç—Å—è!")


async def stars_added_message(
    bot: Bot,
    chat_id: int,
) -> None:
    await bot.send_message(chat_id, "üåü –ó–≤–µ–∑–¥—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏—Å—å!")


async def welcome_message(
    bot: Bot, chat_id: int, is_user_in_game: bool,  # noqa: FBT001
) -> None:
    description = Text(
        Underline(Italic(Bold("ttt!"))),
        " ‚Äî –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–Ω–ª–∞–π–Ω-–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ –≤ Telegram.",
    )

    await bot.send_message(
        chat_id,
        reply_markup=main_menu_keyboard(is_user_in_game),
        **description.as_kwargs(),
    )


async def menu_message(bot: Bot, chat_id: int, is_user_in_game: bool) -> None:  # noqa: FBT001
    text = "üß≠ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å"

    await bot.send_message(
        chat_id,
        text=text,
        reply_markup=main_menu_keyboard(is_user_in_game),
    )
